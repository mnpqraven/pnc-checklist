use crate::prisma;
use crate::prisma::PrismaClient;
use prisma_client_rust::NewClientError;
use std::{error::Error, fs, path::Path};
use tauri::api::path::data_dir;

pub fn db_path_url() -> (String, String) {
    let binding = data_dir().unwrap().join("PNCChecklist").join("database.db");
    let db_path = binding.to_str().unwrap();
    let db_url = format!("file:{db_path}");

    (db_path.to_string(), db_url)
}

pub async fn setup_prisma() -> Result<(), Box<dyn Error>> {
    let (db_path, db_url) = db_path_url();
    println!("Using database in {:?}", &db_path);

    // copying base db to data dir
    if !Path::new(&db_path).exists() {
        println!("database not found, copying...");
        fs::copy("prisma/database.db", db_path)?;
    }

    let client: PrismaClient = PrismaClient::_builder().with_url(db_url).build().await?;
    let client_development: PrismaClient = PrismaClient::_builder().build().await?;

    prepare_db(&client, &client_development).await?;

    Ok(())
}

/// Prepares the db before development or production by running migration
/// command or `db push`
/// Reference: https://prisma.brendonovich.dev/extra/migrations
async fn prepare_db(
    _client: &PrismaClient,
    client_development: &PrismaClient,
) -> Result<(), Box<dyn Error>> {
    // apply all migrations generated by `migrate dev`
    #[cfg(not(debug_assertions))]
    _client._migrate_deploy().await?;
    // synchronize the schema and database without generating migrations
    #[cfg(debug_assertions)]
    client_development
        ._db_push()
        .accept_data_loss()
        .force_reset()
        .await?;
    Ok(())
}

/// Produces a new PrismaClient to execute actions
pub async fn get_db() -> PrismaClient {
    let (_, db_url) = db_path_url();
    match prisma::new_client_with_url(&db_url).await {
        Ok(client) => client,
        Err(_) => {
            // possibly url error, fallback to single node
            // WARN: this should never happen though
            println!("WARNING: USING FALLBACK DATABASE");
            PrismaClient::_builder().build().await.unwrap()
        }
    }
}
