generator client {
    provider = "cargo prisma"
    output   = "../src/prisma.rs"
}

datasource db {
    provider = "sqlite"
    url      = "file:database.db"
}

model Unit {
    id String @id @default(cuid())

    name      String  @unique
    class     String
    current   Loadout @relation("current", fields: [currentLoadoutId], references: [id])
    goal      Loadout @relation("goal", fields: [goalLoadoutId], references: [id])
    className String

    currentLoadoutId String
    goalLoadoutId    String
}

// NOTE: see if we want to flatten the tree or keep it as is
model Loadout {
    id String @id @default(cuid())

    skillLevel  UnitSkill   @relation(fields: [unitSkillId], references: [id])
    level       Int
    algo        AlgoPiece[]
    neural      String
    frags       Int?
    loadoutType String

    unitSkillId String
    UnitCurrent Unit[] @relation("current")
    UnitGoal    Unit[] @relation("goal")
}

model UnitSkill {
    id String @id @default(cuid())

    auto    Int
    passive Int

    Loadout Loadout[]
}

model AlgoPiece {
    id String @unique @default(cuid())

    category String
    name     String
    stat     String
    slot     Slot[]

    Loadout   Loadout? @relation(fields: [loadoutId], references: [id])
    loadoutId String?
}

model Slot {
    id String @id @default(cuid())

    placement String
    value     Boolean

    AlgoPiece   AlgoPiece @relation(fields: [algoPieceId], references: [id])
    algoPieceId String
}
