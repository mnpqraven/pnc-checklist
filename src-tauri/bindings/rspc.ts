// This file was generated by [rspc](https://github.com/oscartbeaumont/rspc). Do not edit this file manually.

export type Procedures = {
    queries: 
        { key: "algoPieces.get", input: never, result: AlgoPiece[] } | 
        { key: "algoPieces.getByLoadoutIds", input: string[], result: AlgoPiece[] } | 
        { key: "enum.AlgoMainStat", input: never, result: CodeTuple<AlgoMainStat>[] } | 
        { key: "enum.Algorithm", input: never, result: CodeTuple<Algorithm>[] } | 
        { key: "enum.Bonus", input: never, result: CodeTuple<Bonus>[] } | 
        { key: "enum.Class", input: never, result: CodeTuple<Class>[] } | 
        { key: "enum.Day", input: never, result: CodeTuple<Day>[] } | 
        { key: "enum.LoadoutType", input: never, result: CodeTuple<LoadoutType>[] } | 
        { key: "enum.NeuralExpansion", input: never, result: CodeTuple<NeuralExpansion>[] } | 
        { key: "loadout.getByUnitId", input: string | null, result: Loadout[] } | 
        { key: "loadouts.get", input: never, result: Loadout[] } | 
        { key: "loadouts.getById", input: string, result: Loadout[] } | 
        { key: "loadouts.getTupleByUnitId", input: string, result: [Loadout, Loadout] } | 
        { key: "requirements.algos", input: never, result: AlgorithmRequirement[] } | 
        { key: "slots.get", input: never, result: Slot[] } | 
        { key: "slots.getByAlgoPieceIds", input: string[] | null, result: Slot[] } | 
        { key: "unit.getById", input: string, result: Unit } | 
        { key: "unitSkills.get", input: never, result: UnitSkill[] } | 
        { key: "unitSkills.getByUnitIds", input: string[], result: UnitSkill[] } | 
        { key: "units.get", input: never, result: Unit[] } | 
        { key: "version", input: never, result: string },
    mutations: 
        { key: "algoPiece.deleteById", input: string, result: AlgoPiece } | 
        { key: "algoPiece.new", input: [string | null, AlgoCategory, boolean], result: AlgoPiece } | 
        { key: "algoPieces.save", input: AlgoPiece[], result: AlgoPiece[] } | 
        { key: "loadouts.save", input: Loadout[], result: Loadout[] } | 
        { key: "slots.save", input: Slot[], result: Slot[] } | 
        { key: "unit.delete", input: string, result: Unit } | 
        { key: "unit.new", input: [string, Class], result: Unit } | 
        { key: "unitSkills.save", input: UnitSkill[], result: UnitSkill[] } | 
        { key: "units.save", input: Unit[], result: Unit[] },
    subscriptions: never
};

export type AlgorithmRequirement = { pieces: IAlgoPiece[]; from_unit_id: string | null }

export type Day = "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun"

export type AlgoPiece = { id: string; category: string; name: string; stat: string; loadoutId: string | null }

export type NeuralExpansion = "One" | "OneHalf" | "Two" | "TwoHalf" | "Three" | "ThreeHalf" | "Four" | "FourHalf" | "Five"

export type Slot = { id: string; placement: string; value: boolean; algoPieceId: string }

export type Class = "Guard" | "Medic" | "Sniper" | "Specialist" | "Warrior"

export type IAlgoSlot = ISlot[]

export type Bonus = "Coin" | "Exp" | "Skill" | { Class: Class }

export type CodeTuple<T> = { code: string; label: T }

export type ISlot = { placement: SlotPlacement; value: boolean }

export type IAlgoPiece = { name: Algorithm; stat: AlgoMainStat; category: AlgoCategory; slot: IAlgoSlot }

export type AlgoCategory = "Offense" | "Stability" | "Special"

export type UnitSkill = { id: string; auto: number; passive: number; loadoutId: string }

export type AlgoMainStat = "Hashrate" | "Hashrate %" | "Atk" | "Atk %" | "Health" | "Health %" | "Haste" | "Physical Pen." | "Physical Pen. %" | "Operand Pen." | "Operand Pen. %" | "Crit %" | "Crit Dmg %" | "Damage Inc." | "Dodge" | "Heal Inc." | "Def" | "Def %" | "Operand Def" | "Operand Def %" | "Post Battle Regen"

export type SlotPlacement = "One" | "Two" | "Three"

/**
 * List of algorithms
 */
export type Algorithm = "Lower Limit" | "Feedforward" | "Deduction" | "Progression" | "Data Repair" | "MLR Matrix" | "Stack" | "Limit Value" | "Encapsulate" | "Iteration" | "Perception" | "Overflow" | "Rationality" | "Connection" | "Convolution" | "Reflection" | "Resolve" | "Inspiration" | "Loop Gain" | "S.V.M" | "Paradigm" | "Delta V" | "Cluster" | "Stratagem" | "Exploit"

export type Loadout = { id: string; level: number; neural: string; frags: number | null; loadoutType: string; unitId: string }

export type Unit = { id: string; name: string; class: string }

export type LoadoutType = "Current" | "Goal"
