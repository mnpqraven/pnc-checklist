@document.meta
title: README
description: Insert description here
authors: Othi
categories: README
created: 2023-01-18
updated: 2023-03-13
version: 0.1.2
@end

* TODO
** Frontend
*** Features
*** Current
    - (x) use backend's `Display` for algo selection options
    - (x) doll select layout improvement
    --- (x) add and delete on the same row, replace text with text above + icon
        below
    --- (x) delete button to the side of each doll entry
    --- (x) option to filter class
    - (x) spacing on skill level sliders
    - (-) refactor old `interfaces` types (errors and results)
    - (=) validation return on frontend home
    - (x) implement React Query
    --- (x) create custom hook
    - (x) update const queryKeys
    - (x) clean up styling and views, prepare for stable before moving to
      backend's prisma(?) development
    #bugs
    - (_) prefetching is happening before window is mounted in
      `useAlgoByDaysQuery`
    --- (_) both `Suspense` and `getInitialProps` are ran in SSR env for
        Nextjs, before tauri IPC is intercepted, making them moot. Scrapped and
        return to conditional rendering on client after query data is retrieved
    #UXUI
    - (x) `radix UI`
    --- (x) `ClassFilter`
    - (-) Doll page:
    --- (x) Loadout: wrench icon top right, slides out for more options: select
        all/none algo, set skill/level/frags to max/min. probably a good spot
        to put loadout name (current/goal) on top

    - (x) AlgoPiece: click on icon to open up image selection div, combobox
        is too tiring to read
    --- (?) probably the same with main stat
    --- (x) select all button in loadout
    --- (_) Wrap `<Loading />` inside `<Suspense>`
    - (x) layout when there's no algo piece is weird
    #refactors
    - (-) replace existing `useEffect` calls only for fetching `invoke`
        data
    --- current progress on refactoring:
    --- (x) `Dashboard`
    --- (-) `Algorithm`
    --- (x) `Requirement`
    --- (x) `Summary`
    --- (-) `pages`
    --- (x) `Doll` components (mutations)
    ----- (x) migrate to using `useQuery` in main page `dolls.tsx` first
    ----- (x) then drill to sub components
    - (-) migrate info fetching from managed tauri state to database queries
    --- (-) dolls: params (name, class) + loadout and unit ids
    ---- (x) dolllist
    ---- (-) header -> `handleSave()`
    ---- (-) loadout
    ---- (x) changing unitId doesn't cache the data
    ---- (x) adding doesn't reflect refetched items
    --- ( ) then we can pass children ids (loadouts then algo pieces) to
        children components,
    --- ( )  alleviate top heavy data, especially in `<Dolls />`
    --- (-) refactor DollList component tree
    --- (x) dollContext controller needs rewriting
    --- (x) updateIndex -> updateCurrentUnit (unit_id)
    --- (x) updateDirtyStore -> separate table updates (updateLoadouts, updateUnit,
        updateUnitSkill, updateAlgoPiece, updateSlot)
        or use caches from react query
    --- (x) loadoutconfig
    --- (-) new algoPiece button
    --- (=) data initialization during adding unit + loading empty database
    ---- (=) custom hook


    - (-) SOLID principle ![(link)](https://github.com/ipenywis/react-solid)

**  Ideas
    - ( )  actual logging to frontend
    - ( )  rsc page inventory for frontend
    - ( )  relative search ? TBD
** Backend
*** Changelog
*** Features
*** Current
    #implementing
    - (x) Parse DB for needed algo pieces
    - (-) inventory screen + backend logic for keychain manipulation
    - (+) rspc ?
    --- (+) creates e2e typesafe between backend and frontend when using invoke,
        should probably implement for easier time using `invoke`
    - (-) should we move CRUDs to rust backend ? / prisma ??
    --- The why:
    --- lookup operations for some items (unit, algo) is easy enough, but if
        there's specific constrains and groupings the further it is into the
        data structure (`AlgoSlot` of each `Unit`) it becomes a mild irritation
        to query data in the backend and a real pain to display and iterate
        over data to the front-end (see `AlgoReqGroup` component in `Inventory`
        page)
    --- We need a way to (probably not as much for look-ups but) group/sort
        data more efficiently than custom queries and/or `invoke` functions
        from the backend if the data structure is only going to get deeper.
    --- (-) prisma + rspc implementation
    ----- (-) prisma setup
    ------ (x) startup client initialization
    ------ (x) correct url mapping
    ------ (-) test with production env (new install, 0 db file)
    ------ (-) test with migration during dev (incremental updates)
    ------ (=) test with migration update on production (migration file ??)
    ------ (x) db getter
    ------ (+) prepare for schema update + data migration
    ------ (!) prisma schema + data structs in rust will be 2 sources of
           truths, need to sync between 2 sources
    ----- (-) rspc setup
    ------ (-) clean up binding mapping
    ------ (-) refactor to module
    - (x) tokio
    - (_) try `Suspense` with swr
    ---- Didn't work, `Suspense` triggers data fetching before `invoke` IPC
         is injected
    ---- Scrapped, using React Query with RSPC instead

    #general
    - ( ) error handle
    -- ( ) requirement
    -- ( ) compute
    -- (!) Frontend can save a low-leveled current and a high-level goal
    -- (!) right now changes to json store struct will make the app panic if
       when trying to serialize current json data,
       needs to make an escape hatch (e.g rename current file then create a new
       from example, or make a edit script)
       `Loadout`, causing `FromTo` panic.
    - (x) normal heavy `tauri::command` fns would block the UI whilst `async`
      wouldn't, ask about tokio
    - (x) async `tauri::command` needs a lifetime mark and `Result`, won't
      block UI

    #refactor
    - (-) `computed`
    --- (-) move unit from json struct to computed struct
    ---- (x) validate with old code
    ----- (x) adding units
    ----- (x) saving units
    ----- (x) removing units
    ----- (x) other fns
    ---- ( ) re-test
    ---- (x) point algos to correct memory stack in `append_unit` and
         `Keychain::new()`
    ----- (x) `AlgoPiece` inside `Locker` will always be cloned, remember to
          keep track of the new cloned value for `Arc`.
    ---- (x) restabilize requirement fns
    ---- (-) refactor new `Arc<Mutex<T>>` generating functions to make it
         easier to read.
    - (x) inverting bools in `AlgoRequirment` feels unintuitive, maybe flip
      value

    #maintenance
    - (-) refactors
    -- (x) model: structs that manage other structs (Storage, Unit,
       Requirements, etc.) should be in their own modules
    -- ( ) check for zombie code esp. in the algorithm/requirement section
    -- (!) clear out old validate code in unit + algorithm

    - (-) documentation
    -- (-) functions
    - (x) bindings for tauri cmd, read main.rs, process valid string,
      optional `camelCase` conversion

****    ideas
        - (x) think more in pipes ? try to keep upcoming refactors with that in
          mind

        - (=) how should we keep track of good algos that are being hoarded ?
        -- (?) inventory state to keep track of all added algo pieces that has been
           added to current ?
        - any piece added to current will be added to inventory
        - deletion window will have 'to inventory' option
        - unequips gerenally defaults to inventory move
        - (?) inventory will be later compared with requirement struct

        - (x) should `UnitRequirement` or `Compute` has its own field of
          requirement for algo
        -- (x) We'll be using `AlgoRequirment` in `UnitRequirement`
